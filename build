#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

GRN="\e[32m"
CLR="\e[0m"


NUM_JOBS=$((`nproc` + 1))

if [[ -z "$name" ]]; then name=barebones; fi

CPU=ia32

case $CPU in
  arm)
    HOST=arm-linux
  ;;
  ia32)
    HOST=i486-linux-gnu
  ;;
  x64)
    HOST=x86_64-linux-gnu
  ;;
  *)
    exit 100
  ;;
esac

OUT_DIR=`pwd`/out/$CPU
PREFIX=/usr

rm -rf $OUT_DIR


#
# gcc
#

VERSION=4.9.2
URL=http://ftpmirror.gnu.org/gcc/gcc-$VERSION/gcc-$VERSION.tar.gz
SRC_DIR=`pwd`/deps/gcc
OBJ_DIR=`pwd`/obj/$CPU/gcc

# Download
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xzf - -C $SRC_DIR --strip-components=1 || exit 110
fi

# Configure & compile
if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR &&
  (
    cd $OBJ_DIR                                                             &&
#    $SRC_DIR/configure --host=$HOST \
    $SRC_DIR/configure $HOST --prefix=$PREFIX \
        --disable-bootstrap --disable-sanity-checks -enable-languages=c,c++ &&
    make --jobs=$NUM_JOBS
  ) || exit 111
fi

# Install
( cd $OBJ_DIR && make --jobs=$NUM_JOBS DESTDIR=$OUT_DIR install-strip ) || exit 112


#
# coreutils (/usr/bin/env)
#

VERSION=8.23
URL=http://ftpmirror.gnu.org/coreutils/coreutils-$VERSION.tar.xz
SRC_DIR=`pwd`/deps/coreutils
OBJ_DIR=`pwd`/obj/$CPU/coreutils

# Download
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xJf - -C $SRC_DIR --strip-components=1 || exit 120
fi

# Configure & compile
if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR &&
  (
    cd $OBJ_DIR                               &&
    $SRC_DIR/configure $HOST --prefix=$PREFIX &&
#    $SRC_DIR/configure --host=$HOST &&
    make --jobs=$NUM_JOBS
  ) || exit 121
fi

# Install
( cd $OBJ_DIR && make --jobs=$NUM_JOBS DESTDIR=$OUT_DIR install ) || exit 122


#
# glibc
#

VERSION=2.20
URL=http://ftpmirror.gnu.org/glibc/glibc-$VERSION.tar.xz
SRC_DIR=`pwd`/deps/libc
OBJ_DIR=`pwd`/obj/$CPU/libc

# Download
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xJf - -C $SRC_DIR --strip-components=1 || exit 130
fi

# Configure & compile
if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR &&
  (
    cd $OBJ_DIR                                                       &&
    $SRC_DIR/configure $HOST --prefix=$PREFIX --disable-sanity-checks &&
#    $SRC_DIR/configure --host=$HOST --disable-sanity-checks &&
    make --jobs=$NUM_JOBS
  ) || exit 131
fi

# Install
( cd $OBJ_DIR && make --jobs=$NUM_JOBS DESTDIR=$OUT_DIR install ) || exit 132


#if [ $(uname -m) == 'x86_64' ]; then
#  mkdir -p $ROOT/lib64                                            &&
#  cp -f /lib/$HOST/ld-linux.so.2 $ROOT/lib/$HOST/                 &&
#  ln -s /lib/$HOST/ld-linux.so.2 $ROOT/lib64/ld-linux-x86-64.so.2 || exit 131
#fi


#
# Node.js
#

VERSION=v`curl -s https://semver.io/node/stable`
URL=http://nodejs.org/dist/latest/node-$VERSION.tar.gz
SRC_DIR=`pwd`/deps/node

# Download
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xzf - -C $SRC_DIR --strip-components=1 || exit 140
fi

# Configure & compile
(
  cd $SRC_DIR                                                  &&
  ./configure --dest-cpu=$CPU --prefix=$PREFIX --dest-os=linux &&
  make --jobs=$NUM_JOBS
) || exit 141

# Install
( cd $SRC_DIR && make --jobs=$NUM_JOBS DESTDIR=$OUT_DIR install ) || exit 142


#
# Strip libraries and binaries
#

find $OUT_DIR | xargs strip --strip-unneeded


#
# Linux kernel & gen_init_cpio utility
#

VERSION=3.18-rc7
URL=https://www.kernel.org/pub/linux/kernel/v3.x/testing/linux-$VERSION.tar.xz
SRC_DIR=`pwd`/deps/linux

# Download & compile gen_init_cpio
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xJf - -C $SRC_DIR --strip-components=1 &&
  (
    cd deps/linux/usr && make --jobs=$NUM_JOBS gen_init_cpio
  ) || exit 150
fi

GEN_INIT_CPIO="deps/linux/usr/gen_init_cpio"


#
# Wrap the system up and pack it
#

case $PLATFORM in
  docker)
    `$GEN_INIT_CPIO cpio.txt` | tar -cf - --format ustar @- | docker import - $name || exit 160
  ;;
  qemu)
    (
      cp -vi config $SRC_DIR/.config  &&
      cd $SRC_DIR && make oldnoconfig &&
      make --jobs=$NUM_JOBS &&
      cp arch/x86/boot/bzImage ../..
    ) || exit 161
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
