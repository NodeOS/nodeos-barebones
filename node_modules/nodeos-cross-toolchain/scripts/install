#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

set +h
umask 022
export LC_ALL=POSIX
unset CFLAGS


# Platform aliases
case $PLATFORM in
  pc|qemu)
    PLATFORM=pc_qemu
  ;;
  image)
    PLATFORM=pc_image
  ;;

  qemu_32)
    PLATFORM=pc_qemu_32
  ;;
  image_32)
    PLATFORM=pc_image_32
  ;;

  qemu_64)
    PLATFORM=pc_qemu_64
  ;;
  image_64)
    PLATFORM=pc_image_64
  ;;

  raspberry)
    PLATFORM=raspberry_qemu
  ;;
esac

# default CPU for each platform
if [[ -z "$CPU" ]]; then
  case $PLATFORM in
    docker)
      CPU=`uname -m`
    ;;
    docker_32)
      CPU=i686
    ;;
    docker_64)
      CPU=x86_64
    ;;

    pc_qemu|pc_image)
      CPU=`uname -m`
    ;;
    pc_qemu_32|pc_image_32)
      CPU=i686
    ;;
    pc_qemu_64|pc_image_64)
      CPU=x86_64
    ;;

    raspberry_qemu|raspberry_image)
      CPU=armv6
    ;;
  esac
fi

case $CPU in
  armv6)
    TARGET=$CPU-nodeos-linux-musleabihf
    ARCH="arm"
  ;;
  i[456]86)
    TARGET=$CPU-nodeos-linux-musl
    ARCH="x86"
  ;;
  x86_64)
    TARGET=$CPU-nodeos-linux-musl
    ARCH="x86"
  ;;
  *)
    echo "Unknown CPU '$CPU'"
    exit 1
  ;;
esac

HOST=$(echo ${MACHTYPE} | sed "s/-[^-]*/-cross/")


NUM_JOBS=$((`getconf _NPROCESSORS_ONLN` + 1))

TOOLS=`pwd`/out

SOURCES=`pwd`/deps
OBJECTS=`pwd`/obj/$CPU
OUT_DIR=`pwd`/out/$CPU

PATH=$TOOLS/bin:/bin:/usr/bin

MAKE="make --jobs=$NUM_JOBS"

mkdir -p   $TOOLS/$TARGET     &&
ln -sfnv . $TOOLS/$TARGET/usr || exit 2


#
# Linux kernel headers
#

SRC_DIR=$SOURCES/linux

if [[ ! -d $TOOLS/$TARGET/include/linux ]]; then
  (
    cd $SRC_DIR

    # Extract headers
    make mrproper                                             &&
    make ARCH=$ARCH headers_check                             &&
    make ARCH=$ARCH INSTALL_HDR_PATH=$TOOLS/$TARGET headers_install
  ) || exit 10
fi


#
# binutils
#

SRC_DIR=$SOURCES/binutils
OBJ_DIR=$OBJECTS/binutils

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 20

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                \
        --prefix=$TOOLS               \
        --target=$TARGET              \
        --with-sysroot=$TOOLS/$TARGET \
        --disable-werror              \
        --disable-nls                 \
        --disable-multilib            || exit 21

    # Compile
    $MAKE configure-host && $MAKE || exit 22

    # Install
    $MAKE install || exit 23
  )

#  case $(uname -m) in
#    x86_64)
#      mkdir -v $TOOLS/lib && ln -sv lib $TOOLS/lib64
#    ;;
#  esac
fi


#
# gcc static
#

SRC_DIR=$SOURCES/gcc
OBJ_DIR=$OBJECTS/gcc

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 30

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                        \
        --prefix=$TOOLS                       \
        --build=$HOST                         \
        --host=$HOST                          \
        --target=$TARGET                      \
        --with-sysroot=$TOOLS/$TARGET         \
        --disable-nls                         \
        --disable-shared                      \
        --without-headers                     \
        --with-newlib                         \
        --disable-decimal-float               \
        --disable-libgomp                     \
        --disable-libmudflap                  \
        --disable-libssp                      \
        --disable-libatomic                   \
        --disable-libquadmath                 \
        --disable-threads                     \
        --disable-multilib                    \
        --with-mpfr-include=$SRC_DIR/mpfr/src \
        --with-mpfr-lib=`pwd`/mpfr/src/.libs  \
        --with-arch=$CPU                      \
        --enable-languages=c                  || exit 31

    # Compile
    $MAKE all-gcc all-target-libgcc || exit 32

    # Install
    $MAKE install-gcc install-target-libgcc || exit 33
  )

  # Remove object files
  rm -rf $OBJ_DIR || exit 34
fi


#
# musl
#

SRC_DIR=$SOURCES/musl
OBJ_DIR=$OBJECTS/musl

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 40

  (
#    cd $OBJ_DIR
    cd $SRC_DIR  # musl don't support out-of-tree builds yet

    # Configure
    CROSS_COMPILE="$TARGET-" \
    $SRC_DIR/configure       \
        --prefix=/           \
        --disable-static     \
        --target=$TARGET     || exit 41

    # Compile
    CROSS_COMPILE="$TARGET-" $MAKE || exit 42

    # Install
    DESTDIR=$TOOLS/$TARGET make install || exit 43
  )
fi


#
# gcc final
#

SRC_DIR=$SOURCES/gcc
OBJ_DIR=$OBJECTS/gcc

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 50

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                        \
        --prefix=$TOOLS                       \
        --build=$HOST                         \
        --host=$HOST                          \
        --target=$TARGET                      \
        --with-sysroot=$TOOLS/$TARGET         \
        --disable-nls                         \
        --disable-static                      \
        --enable-c99                          \
        --enable-long-long                    \
        --disable-libmudflap                  \
        --disable-multilib                    \
        --with-mpfr-include=$SRC_DIR/mpfr/src \
        --with-mpfr-lib=`pwd`/mpfr/src/.libs  \
        --with-arch=$CPU                      \
        --enable-languages=c,c++              || exit 51

    # Compile
    $MAKE || exit 52

    # Install
    $MAKE install || exit 53
  )
fi
