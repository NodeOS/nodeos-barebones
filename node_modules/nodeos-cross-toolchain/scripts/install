#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

set +h
umask 022
export LC_ALL=POSIX
unset CFLAGS


DEPS=`pwd`/deps
TOOLS=`pwd`/out

source scripts/adjustEnvVars.sh || exit $?


mkdir -p     $TOOLS/$TARGET       &&
ln -sfnv .   $TOOLS/$TARGET/usr   &&
ln -sfnv lib $TOOLS/$TARGET/lib64 || exit 2


#
# Linux kernel headers
#

SRC_DIR=$DEPS/linux

if [[ ! -d $TOOLS/$TARGET/include/linux ]]; then
  (
    cd $SRC_DIR

    # Extract headers
    $MAKE mrproper                 &&
    $MAKE ARCH=$ARCH headers_check &&
    $MAKE ARCH=$ARCH INSTALL_HDR_PATH=$TOOLS/$TARGET headers_install
  ) || exit 10
fi


#
# binutils
#

SRC_DIR=$DEPS/binutils
OBJ_DIR=$OBJECTS/binutils

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 20

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                \
        --prefix=$TOOLS               \
        --target=$TARGET              \
        --with-sysroot=$TOOLS/$TARGET \
        --disable-werror              \
        --disable-nls                 \
        --disable-multilib            || exit 21

    # Compile
    $MAKE configure-host && $MAKE || exit 22

    # Install
    $MAKE install || exit 23
  ) || exit $?

#  case $(uname -m) in
#    x86_64)
#      mkdir -v $TOOLS/lib && ln -sv lib $TOOLS/lib64
#    ;;
#  esac
fi


#
# gcc static
#

SRC_DIR=$DEPS/gcc
OBJ_DIR=$OBJECTS/gcc

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 30

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                        \
        --prefix=$TOOLS                       \
        --build=$HOST                         \
        --host=$HOST                          \
        --target=$TARGET                      \
        --with-sysroot=$TOOLS/$TARGET         \
        --disable-nls                         \
        --disable-shared                      \
        --without-headers                     \
        --with-newlib                         \
        --disable-decimal-float               \
        --disable-libgomp                     \
        --disable-libmudflap                  \
        --disable-libssp                      \
        --disable-libatomic                   \
        --disable-libquadmath                 \
        --disable-threads                     \
        --disable-multilib                    \
        --with-mpfr-include=$SRC_DIR/mpfr/src \
        --with-mpfr-lib=`pwd`/mpfr/src/.libs  \
        --with-arch=$CPU                      \
        --enable-languages=c                  || exit 31

    # Compile
    $MAKE all-gcc all-target-libgcc || exit 32

    # Install
    $MAKE install-gcc install-target-libgcc || exit 33
  ) || exit $?

  # Remove object files
  rm -rf $OBJ_DIR || exit 34
fi


#
# musl
#

SRC_DIR=$DEPS/musl
OBJ_DIR=$OBJECTS/musl

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 40

  (
#    cd $OBJ_DIR
    cd $SRC_DIR && $MAKE clean  # musl don't support out-of-tree builds yet

    # Configure
    CROSS_COMPILE="$TARGET-" \
    $SRC_DIR/configure       \
        --prefix=/           \
        --disable-static     \
        --target=$TARGET     || exit 41

    # Compile
    CROSS_COMPILE="$TARGET-" $MAKE || exit 42

    # Install
    DESTDIR=$TOOLS/$TARGET $MAKE install || exit 43
  ) || exit $?
fi


#
# gcc final
#

SRC_DIR=$DEPS/gcc
OBJ_DIR=$OBJECTS/gcc

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 50

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                        \
        --prefix=$TOOLS                       \
        --build=$HOST                         \
        --host=$HOST                          \
        --target=$TARGET                      \
        --with-sysroot=$TOOLS/$TARGET         \
        --disable-nls                         \
        --disable-static                      \
        --enable-c99                          \
        --enable-long-long                    \
        --disable-libmudflap                  \
        --disable-multilib                    \
        --with-mpfr-include=$SRC_DIR/mpfr/src \
        --with-mpfr-lib=`pwd`/mpfr/src/.libs  \
        --with-arch=$CPU                      \
        --enable-languages=c,c++              || exit 51

    # Compile
    $MAKE || exit 52

    # Install
    $MAKE install || exit 53
  ) || exit $?
fi
