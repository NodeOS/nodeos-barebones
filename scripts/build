#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot


TOOLCHAIN=`pwd`/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


#
# Node.js
#

SRC_DIR=`pwd`/deps/node
OBJ_DIR=$OBJECTS/node

if [[ ! -f $OBJ_DIR ]]; then
  echo -e "${WHT}Compiling Node.js${CLR}"

  (
#    cd $OBJ_DIR
    cd $SRC_DIR && $MAKE clean  # Node.js don't support out-of-tree builds yet

    # Configure
#    CROSS_COMPILE="$TARGET-"  \
    CC=$TARGET-gcc            \
    CXX=$TARGET-g++           \
    $SRC_DIR/configure        \
        --prefix=/            \
        --dest-cpu=$NODE_ARCH \
        --dest-os=linux       \
        --without-dtrace      \
        --without-npm         \
        --without-snapshot    || exit 11

    # Compile
    $MAKE || exit 12

    # Strip binary
    $TARGET-strip node || exit 13
  ) || err $?

  # Install
  mkdir -p $OBJECTS         || exit 14
  cp $SRC_DIR/node $OBJ_DIR || exit 15

  # Exec test

  echo -e "${GRN}Successfully compiled Node.js${CLR}"
fi


#
# Wrap the system up and pack it
#

SRC_DIR=$TOOLCHAIN/deps/linux
OBJ_DIR=$OBJECTS/linux

mkdir -p $OBJ_DIR

# Generate initramfs configuration file
cat resources/cpio_root.txt > $OBJ_DIR/cpio.txt || exit 20
if [[ $PLATFORM != vagga ]]; then
  cat resources/cpio_standalone.txt >> $OBJ_DIR/cpio.txt || exit 21
fi
eval "echo \"$(< resources/cpio_common.txt)\"" >> $OBJ_DIR/cpio.txt || exit 22

case $PLATFORM in
  vagga)
    if [[ ! -f $OUT_DIR/barebones.tar ]]; then
      ( cd $SRC_DIR/usr && $MAKE O=$OBJ_DIR gen_init_cpio ) || exit 30

      mkdir -p $OUT_DIR                             &&
      $OBJ_DIR/usr/gen_init_cpio $OBJ_DIR/cpio.txt  | \
          scripts/cpio2tar > $OUT_DIR/barebones.tar || exit 31
    fi

    ln -sf $CPU/barebones.tar out/latest || exit 32
  ;;

  pc_* | raspberry)
    if [[ ! -f $OUT_DIR/linux ]]; then
      echo -e "${WHT}Compiling Linux${CLR}"

      MAKE="$MAKE O=$OBJ_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

      (
        cd $SRC_DIR

        # Configure
        $MAKE1 mrproper || exit 40

        case $PLATFORM in
          pc_*)
            DEFCONFIG=${CPU_FAMILY}_defconfig
          ;;

          raspberry)
            DEFCONFIG=bcm2835_defconfig
          ;;

          *)
            echo "Unknown platform '$PLATFORM'"
            exit 41
          ;;
        esac

        $MAKE $DEFCONFIG || exit 42
      ) || err $?

      # Set NodeOS custom configuration
      cat resources/config >> $OBJ_DIR/.config || err 43

      (
        cd $SRC_DIR

        # Fix and clean configuration
        $MAKE oldnoconfig || exit 44

        # Compile
        $MAKE || exit 45
      ) || err $?

      # Install
      mkdir -p $OUT_DIR                                  &&
      cp $OBJ_DIR/arch/$ARCH/boot/bzImage $OUT_DIR/linux || exit 46

      echo -e "${GRN}Successfully compiled Linux${CLR}"
    fi

    ln -sf $CPU/linux out/latest || exit 47

    scripts/test || exit 48
  ;;
esac


echo -e "${GRN}Successfully built 'barebones'${CLR}"
