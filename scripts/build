#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot


set -o pipefail


while getopts ":k:l:" opt; do
  case $opt in
    k)
      KERNEL="$OPTARG"  # linux, netbsd, nokernel
    ;;

    l)
      LINUX="$OPTARG"  # Location of the (probably patched) Linux kernel sources
    ;;
  esac
done


# Default kernel
if [[ -z "$KERNEL" ]]; then
  KERNEL=linux
fi


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


#
# Define source code paths
#

SRC_INIT=`pwd`/deps/init
SRC_NODE=`node -p "require('nodeos-nodejs')"`
SRC_LINUX=`pwd`/deps/linux


#
# Define steps paths
#

NODE_PLATFORM=linux

OBJ_INIT=$OBJECTS/init
OBJ_NODE=$OBJECTS/node
OBJ_RELEASE=$OBJECTS/os-release
OBJ_CPIO_TXT=$OBJECTS/cpio.txt
OBJ_GEN_INIT_CPIO=$OBJECTS/gen_init_cpio
OBJ_LINUX=$OBJECTS/linux
OUT_DIR=`pwd`/out/$CPU
PREBUILD=prebuilds/$NODE_PLATFORM-$NODE_ARCH.tar.gz


#
# Build cross-compiler (if needed)
#

(
  cd $TOOLCHAIN

  LINUX=$SRC_LINUX                                              \
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit $?
) || exit $?


#
# init
#

SRC_DIR=$SRC_INIT
STEP_DIR=$OBJ_INIT

if [[ ! -f $STEP_DIR ]]; then
  echo -e "${WHT}Compiling init${CLR}"

  # Delete previous initramfs
  rm -rf $OUT_DIR/barebones.cpio.gz

  (
#    cd $STEP_DIR
    cd $SRC_DIR && $MAKE clean  # nodeos-init don't support out-of-tree builds yet

    # Compile
    CC=$TARGET-gcc \
    $MAKE          || exit 10

    # Strip binary
    $TARGET-strip init || exit 11
  ) || err $?

  # Install
  mkdir -p $OBJECTS          &&
  cp $SRC_DIR/init $STEP_DIR || exit 12

  echo -e "${GRN}Successfully compiled init${CLR}"
fi


#
# Node.js
#

SRC_DIR=$SRC_NODE
STEP_DIR=$OBJ_NODE

if [[ ! -f $STEP_DIR ]]; then
  echo -e "${WHT}Installing Node.js${CLR}"

  # Delete previous initramfs
  rm -rf $OBJ_GEN_INIT_CPIO

  # Install
  (
    cd $SRC_DIR
    npm install --arch=$NODE_ARCH --production || exit 20

    cp bin/$CPU $STEP_DIR || exit 21
  ) || err $?

  echo -e "${GRN}Successfully installed Node.js${CLR}"
fi


#
# NodeOS version
#

STEP_DIR=$OBJ_RELEASE

mkdir -p `dirname $STEP_DIR`

VERSION=`node -p "require('./package.json').version"` || VERSION="(unknown)"
CODENAME="Amanda"
BUILD_ID=`node -p "(new Date()).toISOString().substr(0,10)"`

eval "echo \"$(< resources/os-release)\"" > $STEP_DIR || err 30


#
# Generate initramfs configuration file
#

STEP_DIR=$OBJ_CPIO_TXT

mkdir -p `dirname $STEP_DIR`

BINARY=bin/node
BINARY_PATH=$OBJ_NODE

eval "echo \"$(< resources/cpio.txt)\"" > $STEP_DIR || err 40


#
# Generate initramfs
#

SRC_DIR=$SRC_LINUX
STEP_DIR=$OBJ_GEN_INIT_CPIO

if [[ ! -f $STEP_DIR ]]; then
  # Delete previous initramfs and kernel
  rmStep $OUT_DIR $PREBUILD

  (
    cd $SRC_DIR/usr     &&
    $MAKE gen_init_cpio || exit 50

    mkdir -p `dirname $STEP_DIR` &&
    mv gen_init_cpio  $STEP_DIR  || exit 51
  ) || err $?

  mkdir -p $OUT_DIR                                           &&
  $STEP_DIR $OBJ_CPIO_TXT | gzip > $OUT_DIR/barebones.cpio.gz || err 52
fi


#
# Wrap the system up and pack it
#

SRC_DIR=$SRC_LINUX
STEP_DIR=$OBJ_LINUX

case $KERNEL in
  nokernel)
  ;;

  linux)
    if [[ ! -d $STEP_DIR ]]; then
      echo -e "${WHT}Compiling Linux${CLR}"

      mkdir -p $STEP_DIR

      # Delete previous kernel
      rm -f $OUT_DIR/linux $OUT_DIR/dts || exit 60

      MAKE="$MAKE O=$STEP_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

      (
        cd $SRC_DIR

        # Configure
        $MAKE1 mrproper || exit 61

        case $MACHINE in
          pc)
            DEFCONFIG=${CPU_FAMILY}_defconfig
          ;;

          raspi)
            DEFCONFIG=bcm2835_defconfig
          ;;

          raspi2)
            #DEFCONFIG=bcm2709_defconfig
            DEFCONFIG=bcm2835_defconfig
            #DEFCONFIG=bcm2836_defconfig
          ;;

          raspi3)
            DEFCONFIG=bcm2837_defconfig
          ;;

          *)
            echo "Unknown MACHINE '$MACHINE'"
            exit 62
          ;;
        esac

        $MAKE $DEFCONFIG || exit 63
      ) || exit $?

      # Set NodeOS custom configurations
      eval "echo \"$(< resources/config/common)\"" >> $STEP_DIR/.config || err 64

      eval "echo \"$(< resources/config/workstation)\"" >> $STEP_DIR/.config || err 64
#      eval "echo \"$(< resources/config/mainframe)\"" >> $STEP_DIR/.config || err 64

      (
        cd $SRC_DIR

        # Fix and clean configuration
        $MAKE oldnoconfig || exit 65

        # Compile
        $MAKE || exit 66
      ) || err $?

      # Install
      mkdir -p $OUT_DIR || exit 67

      case $MACHINE in
        pc)
          cp $STEP_DIR/arch/$ARCH/boot/bzImage $OUT_DIR || exit 68
        ;;

        raspi|raspi2|raspi3)
          cp $STEP_DIR/arch/$ARCH/boot/zImage $OUT_DIR || exit 69

          mkdir -p $OUT_DIR/dts                               &&
          cp $STEP_DIR/arch/$ARCH/boot/dts/*.dtb $OUT_DIR/dts || exit 70
        ;;

        *)
          echo "Unknown MACHINE '$MACHINE'"
          exit 71
        ;;
      esac

      echo -e "${GRN}Successfully compiled Linux${CLR}"
    fi
  ;;

  *)
    echo -e "${RED}Unknown KERNEL '$KERNEL'${CLR}"
    exit 80
  ;;
esac


ln -sfn $CPU out/latest || err 90

echo -e "${GRN}Successfully built 'barebones'${CLR}"


#
# Pack `nodeos-barebones` in a node-gyp compatible way
#

# TODO use Node.js arch instead of explicit CPUs and move to BigRedButton

STEP_DIR=$PREBUILD

mkdir -p `dirname $STEP_DIR`          &&
tar -cf - out/$CPU out/latest | gzip > $STEP_DIR || err 100
