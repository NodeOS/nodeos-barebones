#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot


set -o pipefail


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


# Clean object dir and return the input error
function err(){
  rmStep $STEP_DIR
  exit $1
}


#
# Define steps paths
#

OBJ_INIT=$OBJECTS/init
OBJ_NODE=`node -p "require('nodeos-nodejs')"`/bin/$CPU
OBJ_RELEASE=$OBJECTS/os-release
OBJ_CPIO_TXT=$OBJECTS/cpio.txt
OBJ_LINUX=$OBJECTS/linux
OUT_DIR=`pwd`/out/$CPU


#
# init
#

SRC_DIR=`pwd`/deps/init
STEP_DIR=$OBJ_INIT

if [[ ! -f $STEP_DIR && $PLATFORM != vagga ]]; then
  echo -e "${WHT}Compiling init${CLR}"

  # Delete previous kernel
  rm -rf $OBJ_LINUX

  (
#    cd $STEP_DIR
    cd $SRC_DIR && $MAKE clean  # nodeos-init don't support out-of-tree builds yet

    # Compile
    CC=$TARGET-gcc \
    $MAKE          || exit 10

    # Strip binary
    $TARGET-strip init || exit 11
  ) || err $?

  # Install
  mkdir -p $OBJECTS          &&
  cp $SRC_DIR/init $STEP_DIR || exit 12

  echo -e "${GRN}Successfully compiled init${CLR}"
fi


#
# Node.js
#

STEP_DIR=$OBJ_NODE

if [[ ! -f $STEP_DIR ]]; then
  echo -e "${WHT}Installing Node.js${CLR}"

  # Delete previous kernel
  rm -rf $OBJ_LINUX

  # Install
  (
    cd node_modules/nodeos-nodejs

    #  CROSS_COMPILE="$TARGET-" \
      CC=$TARGET-gcc           \
      CXX=$TARGET-g++          \
      npm run install          \
        --                     \
        --arch=$NODE_ARCH      || exit 20
  ) || err $?

  OBJ_NODE=`node -p "require('nodeos-nodejs')"`/bin/$CPU

  echo -e "${GRN}Successfully installed Node.js${CLR}"
fi


#
# NodeOS version
#

STEP_DIR=$OBJ_RELEASE

mkdir -p `dirname $STEP_DIR`

VERSION=`node -p "require('./package.json').version"` || VERSION="(unknown)"
CODENAME="Amanda"
BUILD_ID=`node -p "(new Date()).toISOString().substr(0,10)"`

eval "echo \"$(< resources/os-release)\"" > $STEP_DIR || err 30


#
# Generate initramfs configuration file
#

STEP_DIR=$OBJ_CPIO_TXT

mkdir -p `dirname $STEP_DIR`

cat resources/cpio/root.txt > $STEP_DIR || err 40
if [[ $PLATFORM != vagga ]]; then
  eval "echo \"$(< resources/cpio/standalone.txt)\"" >> $STEP_DIR || err 41
else
  cat resources/cpio/vagga.txt >> $STEP_DIR || err 42
fi
eval "echo \"$(< resources/cpio/common.txt)\"" >> $STEP_DIR || err 43


#
# Wrap the system up and pack it
#

SRC_DIR=deps/linux
STEP_DIR=$OBJ_LINUX

mkdir -p $STEP_DIR

case $PLATFORM in
  docker|vagga)
    if [[ ! -f $OUT_DIR/barebones.tar ]]; then
      (
        cd $SRC_DIR/usr     &&
        $MAKE gen_init_cpio || exit 50

        mkdir -p         $STEP_DIR/usr &&
        mv gen_init_cpio $STEP_DIR/usr || exit 51
      ) || err $?

      mkdir -p $OUT_DIR                         &&
      $STEP_DIR/usr/gen_init_cpio $OBJ_CPIO_TXT | \
        cpio2tar > $OUT_DIR/barebones.tar       || err 52

      rm -f $STEP_DIR/.config || err 53
    fi

    ln -sf $CPU/barebones.tar out/latest || err 54
  ;;

  pc_* | raspberry_* | versatilepb_*)
    if [[ `ls $STEP_DIR | wc -l` -eq 1 ]] \
    || [[ ! -f $OUT_DIR/linux          ]]; then
      echo -e "${WHT}Compiling Linux${CLR}"

      # Delete previous products
      rm -f $OUT_DIR/linux || exit 60

      MAKE="$MAKE O=$STEP_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

      (
        cd $SRC_DIR

        # Configure
        $MAKE1 mrproper || exit 61

        case $PLATFORM in
          pc_*)
            DEFCONFIG=${CPU_FAMILY}_defconfig
          ;;

          raspberry_*)
            DEFCONFIG=bcm2835_defconfig
          ;;

          *)
            echo "Unknown platform '$PLATFORM'"
            exit 62
          ;;
        esac

        $MAKE $DEFCONFIG || exit 63
      ) || exit $?

      # Set NodeOS custom configurations
      eval "echo \"$(< resources/config/common)\"" >> $STEP_DIR/.config || err 64

      eval "echo \"$(< resources/config/workstation)\"" >> $STEP_DIR/.config || err 64
#      eval "echo \"$(< resources/config/mainframe)\"" >> $STEP_DIR/.config || err 64

      (
        cd $SRC_DIR

        # Fix and clean configuration
        $MAKE oldnoconfig || exit 65

        # Compile
        $MAKE || exit 66
      ) || err $?

      # Install
      mkdir -p $OUT_DIR || exit 67

      case $PLATFORM in
        pc_*)
          cp $STEP_DIR/arch/$ARCH/boot/bzImage $OUT_DIR/linux || exit 68
        ;;

        raspberry_*)
          cp $STEP_DIR/arch/$ARCH/boot/zImage $OUT_DIR/linux || exit 69
        ;;

        *)
          echo "Unknown platform '$PLATFORM'"
          exit 70
        ;;
      esac

      echo -e "${GRN}Successfully compiled Linux${CLR}"
    fi

    ln -sf $CPU/linux out/latest || exit 72
  ;;

  *)
    echo -e "${RED}Unknown platform '$PLATFORM'${CLR}"
    exit 80
  ;;
esac


echo -e "${GRN}Successfully built 'barebones'${CLR}"
