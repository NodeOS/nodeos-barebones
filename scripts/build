#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot


set -o pipefail


while getopts ":k:l:" opt; do
  case $opt in
    k)
      KERNEL="$OPTARG"  # linux, netbsd, nokernel
    ;;

    l)
      LINUX="$OPTARG"  # Location of the (probably patched) Linux kernel sources
    ;;
  esac
done


# Default kernel
if [[ -z "$KERNEL" ]]; then
  KERNEL=linux
fi


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


#
# Define source code paths
#

SRC_INIT=`pwd`/deps/init
SRC_NODE=`node -p "require('nodeos-nodejs')"`
LINUX=${LINUX:-`node -p "require('nodeos-linux')"`/linux}


#
# Define steps paths
#

NODE_PLATFORM=linux

OBJ_INIT=$OBJECTS/init
OBJ_NODE=$OBJECTS/node
OBJ_RELEASE=$OBJECTS/os-release
OBJ_CPIO_TXT=$OBJECTS/cpio.txt
OBJ_GEN_INIT_CPIO=$OBJECTS/gen_init_cpio
OUT_DIR=`pwd`/out/$CPU
OUT_INITRAM=$OUT_DIR/barebones.cpio.gz
OUT_LINUX=$OUT_DIR/linux
PREBUILD=prebuilds/$NODE_PLATFORM-$NODE_ARCH.tar.gz


#
# Build cross-compiler (if needed)
#

(
  cd $TOOLCHAIN

  LINUX=$LINUX                                                  \
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit $?
) || exit $?


#
# init
#

SRC_DIR=$SRC_INIT
STEP_DIR=$OBJ_INIT

if [[ ! -f $STEP_DIR ]]; then
  echo -e "${WHT}Compiling init${CLR}"

  # Delete previous initramfs
  rm -rf $OUT_INITRAM

  (
#    cd $STEP_DIR
    cd $SRC_DIR && $MAKE clean  # nodeos-init don't support out-of-tree builds yet

    # Compile
    CC=$TARGET-gcc \
    $MAKE          || exit 10

    # Strip binary
    $TARGET-strip init || exit 11
  ) || err $?

  # Install
  mkdir -p $OBJECTS          &&
  cp $SRC_DIR/init $STEP_DIR || exit 12

  echo -e "${GRN}Successfully compiled init${CLR}"
fi


#
# Node.js
#

SRC_DIR=$SRC_NODE
STEP_DIR=$OBJ_NODE

if [[ ! -f $STEP_DIR ]]; then
  echo -e "${WHT}Installing Node.js${CLR}"

  # Delete previous initramfs
  rm -rf $OBJ_GEN_INIT_CPIO

  # Install
  (
    cd $SRC_DIR
    npm install --arch=$NODE_ARCH --production || exit 20

    cp bin/$CPU $STEP_DIR || exit 21
  ) || err $?

  echo -e "${GRN}Successfully installed Node.js${CLR}"
fi


#
# NodeOS version
#

STEP_DIR=$OBJ_RELEASE

mkdir -p `dirname $STEP_DIR`

VERSION=`node -p "require('./package.json').version"` || VERSION="(unknown)"
CODENAME="Amanda"
BUILD_ID=`node -p "(new Date()).toISOString().substr(0,10)"`

eval "echo \"$(< resources/os-release)\"" > $STEP_DIR || err 30


#
# Generate initramfs configuration file
#

STEP_DIR=$OBJ_CPIO_TXT

mkdir -p `dirname $STEP_DIR`

BINARY=bin/node
BINARY_PATH=$OBJ_NODE

eval "echo \"$(< resources/cpio.txt)\"" > $STEP_DIR || err 40


#
# Generate initramfs
#

SRC_DIR=$LINUX
STEP_DIR=$OBJ_GEN_INIT_CPIO

if [[ ! -f $STEP_DIR ]]; then
  # Delete previous initramfs and kernel
  rmStep $OUT_DIR $PREBUILD

  (
    cd $SRC_DIR/usr     &&
    $MAKE gen_init_cpio || exit 50

    mkdir -p `dirname $STEP_DIR` &&
    mv gen_init_cpio  $STEP_DIR  || exit 51
  ) || err $?

  mkdir -p $OUT_DIR                                           &&
  $STEP_DIR $OBJ_CPIO_TXT | gzip > $OUT_DIR/barebones.cpio.gz || err 52
fi


#
# Wrap the system up and pack it
#

SRC_DIR=$SRC_LINUX
STEP_DIR=$OBJ_LINUX

case $KERNEL in
  nokernel)
  ;;

  linux)
    STEP_DIR=$OUT_LINUX

    if [[ ! -d $STEP_DIR ]]; then
      # Delete previous prebuild images
      rmStep $PREBUILD

      barebonesos-linux                   \
          -c resources/config/workstation \
          -i $OUT_INITRAM                 \
          -l $LINUX                       \
          -o $STEP_DIR                    || err 60
    fi
  ;;

  *)
    echo -e "${RED}Unknown KERNEL '$KERNEL'${CLR}"
    err 61
  ;;
esac


ln -sfn $CPU out/latest || err 70

echo -e "${GRN}Successfully built 'barebones'${CLR}"


#
# Pack `nodeos-barebones` in a node-gyp compatible way
#

# TODO use Node.js arch instead of explicit CPUs and move to BigRedButton

STEP_DIR=$PREBUILD

mkdir -p `dirname $STEP_DIR`                     &&
tar -cf - out/$CPU out/latest | gzip > $STEP_DIR || err 80
