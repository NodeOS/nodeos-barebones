#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot


TOOLCHAIN=`pwd`/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=barebones; fi


#
# Node.js
#

SRC_DIR=`pwd`/deps/node
OBJ_DIR=$OBJECTS/node

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Compiling Node.js${CLR}"

  mkdir -p $OBJ_DIR || exit 10

  (
#    cd $OBJ_DIR
    cd $SRC_DIR && $MAKE clean  # Node.js don't support out-of-tree builds yet

    # Configure
#    CROSS_COMPILE="$TARGET-"  \
    CC=$TARGET-gcc            \
    CXX=$TARGET-g++           \
    $SRC_DIR/configure        \
        --dest-cpu=$NODE_ARCH \
        --prefix=/            \
        --dest-os=linux       \
        --without-dtrace      \
        --without-npm         \
        --without-snapshot    || exit 11

    # Compile
    $MAKE || exit 12

    # Strip binary
    $TARGET-strip node || exit 13
  ) || err $?

  # Install
  mkdir -p $OUT_DIR                          || exit 14
  cp $SRC_DIR/out/Release/node $OUT_DIR/node || exit 15

  echo -e "${GRN}Successfully compiled Node.js${CLR}"
fi


#
# Wrap the system up and pack it
#

SRC_DIR=$TOOLCHAIN/deps/linux
OBJ_DIR=$OBJECTS/linux

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR

  # Generate initramfs configuration file
  eval "echo \"$(< cpio.txt)\"" > $OBJ_DIR/cpio.txt || exit 20

  case $PLATFORM in
    docker)
      ( cd $SRC_DIR/usr && $MAKE O=$OBJ_DIR gen_init_cpio ) || exit 21

    `$OBJ_DIR/usr/gen_init_cpio $OBJ_DIR/cpio.txt` | \
        tar -cf - --format ustar @-                | \
        docker import - $name                      || exit 22
    ;;
    pc_qemu | pc_iso | raspberry_qemu | raspberry_image)
      echo -e "${WHT}Compiling Linux${CLR}"

      MAKE="$MAKE O=$OBJ_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET-"

      (
        cd $SRC_DIR

        # Configure
        $MAKE1 mrproper || exit 23

        case $PLATFORM in
          pc_qemu | pc_iso)
            DEFCONFIG=${CPU_FAMILY}_defconfig
          ;;

          raspberry_qemu | raspberry_image)
            DEFCONFIG=bcm2835_defconfig
          ;;
        esac

        $MAKE $DEFCONFIG || exit 24
      ) || err $?

      # Set NodeOS custom configuration
      cat config >> $OBJ_DIR/.config || err 25

      (
        cd $SRC_DIR

        # Fix and clean configuration
        $MAKE oldnoconfig || exit 26

        # Compile
        $MAKE || exit 27
      ) || err $?

      # Install
      mkdir -p $OUT_DIR                                  &&
      cp $OBJ_DIR/arch/$ARCH/boot/bzImage $OUT_DIR/linux || err 28

      echo -e "${GRN}Successfully compiled Linux${CLR}"

      ln -sfv $OUT_DIR/linux bzImage || exit 29
    ;;
  esac
fi
