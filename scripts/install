#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

GRN="\e[32m"
CLR="\e[0m"


# Platform aliases
case $PLATFORM in
  pc|qemu)
    PLATFORM=pc_qemu
  ;;
  image)
    PLATFORM=pc_image
  ;;

  qemu_32)
    PLATFORM=pc_qemu_32
  ;;
  image_32)
    PLATFORM=pc_image_32
  ;;

  qemu_64)
    PLATFORM=pc_qemu_64
  ;;
  image_64)
    PLATFORM=pc_image_64
  ;;

  raspberry)
    PLATFORM=raspberry_qemu
  ;;
esac

# default CPU for each platform
if [[ -z "$CPU" ]]; then
  case $PLATFORM in
    docker)
      CPU=`uname -m`
    ;;
    docker_32)
      CPU=i686
    ;;
    docker_64)
      CPU=x86_64
    ;;

    pc_qemu|pc_image)
      CPU=`uname -m`
    ;;
    pc_qemu_32|pc_image_32)
      CPU=i686
    ;;
    pc_qemu_64|pc_image_64)
      CPU=x86_64
    ;;

    raspberry_qemu|raspberry_image)
      CPU=armv6
    ;;
  esac
fi

case $CPU in
  armv6)
    TARGET=$CPU-nodeos-linux-musleabihf
    ARCH="arm"
    NODE_ARCH=arm
  ;;
  i[456]86)
    TARGET=$CPU-nodeos-linux-musl
    ARCH="x86"
    NODE_ARCH=ia32
  ;;
  x86_64)
    TARGET=$CPU-nodeos-linux-musl
    ARCH="x86"
    NODE_ARCH=x64
  ;;
  *)
    echo "Unknown CPU '$CPU'"
    exit 1
  ;;
esac


NUM_JOBS=$((`nproc` + 1))

if [[ -z "$name" ]]; then name=barebones; fi


TOOLCHAIN=`pwd`/node_modules/nodeos-cross-toolchain
SOURCES=$TOOLCHAIN/sources
OBJECTS=`pwd`/obj/$CPU
PATH=$TOOLCHAIN/cross-tools/bin:/bin:/usr/bin

PREFIX=/usr

MAKE="make --jobs=$NUM_JOBS"


#
# Node.js
#

SRC_DIR=`pwd`/deps/node
OBJ_DIR=$OBJECTS/node

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR || exit 10

  (
  #  cd $OBJ_DIR
    cd $SRC_DIR  # Node.js don't support out-of-tree builds yet

    # Configure
#    CROSS_COMPILE="$TARGET-" \
    CC=$TARGET-gcc           \
    CXX=$TARGET-g++          \
    $SRC_DIR/configure       \
        --dest-cpu=$NODE_ARCH \
        --prefix=$PREFIX     \
        --dest-os=linux      \
        --without-dtrace     \
        --without-npm        \
        --without-snapshot   || exit 11

    # Compile
    $MAKE || exit 12

    # Strip binary
    $TARGET-strip node || exit 13
  )
fi


#
# Wrap the system up and pack it
#

SRC_DIR=$SOURCES/linux
OBJ_DIR=$OBJECTS/linux
OUT_DIR=out

case $PLATFORM in
  docker|docker_32|docker_64)
    ( cd $SRC_DIR/usr && $MAKE O=$OBJ_DIR gen_init_cpio ) || exit 20
    `$OBJ_DIR/usr/gen_init_cpio cpio.txt` | tar -cf - --format ustar @- | docker import - $name || exit 21
  ;;
  pc_qemu|pc_qemu_32|pc_qemu_64|pc_image|pc_image_32|pc_image_64|raspberry_qemu|raspberry_image)
    if [[ ! -d $OBJ_DIR ]]; then
      mkdir -p $OBJ_DIR             &&
      cp -v config $OBJ_DIR/.config || exit 22

      (
        cd $SRC_DIR

        # Configure
        make mrproper               || exit 23
        make O=$OBJ_DIR oldnoconfig || exit 24

        # Compile
        $MAKE O=$OBJ_DIR ARCH=$ARCH CROSS_COMPILE=$TARGET- || exit 25
      )

      # Install
      mkdir -p $OUT_DIR                                 || exit 26
      cp $OBJ_DIR/arch/$ARCH/boot/bzImage $OUT_DIR/$CPU || exit 27
      ln -sfv $OUT_DIR/$CPU bzImage                     || exit 28
    fi
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
