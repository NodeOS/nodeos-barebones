#!/usr/bin/env node

var cp   = require('child_process')
var cpus = require('os').cpus
var fs   = require('fs')
var path = require('path')

var manager = require('download-manager')


const JOBS = cpus().length


var targetList =
[
  'arm-softmmu',
  'i386-softmmu',
  'x86_64-softmmu',
  'arm-linux-user',
  'i386-linux-user',
  'x86_64-linux-user'
]


// Source versions

const INIT_VERSION = "master"
const NODEJS_VERSION = "v4.3.2"
const QEMU_VERSION = "raspi"


// Source URLs

const INIT_URL="https://github.com/piranna/nodeos-init/archive/"+INIT_VERSION+".tar.gz"
const NODEJS_URL="http://nodejs.org/dist/"+NODEJS_VERSION+"/node-"+NODEJS_VERSION+".tar.gz"
const QEMU_URL="https://github.com/0xabu/qemu/archive/"+QEMU_VERSION+".tar.gz"


// Checksums

const NODEJS_SHA256 = '1f92f6d31f7292ce56db57d6703efccf3e6c945948f5901610cefa69e78d3498'


//
// Node.js
//

var downloads =
[
  {
    name: 'init',
    url: INIT_URL
  },
  {
    name: 'node',
    url: NODEJS_URL,
    sha256: NODEJS_SHA256,
    action: function(callback)
    {
      // Allow to inspect NodeOS version from inside Node.js
      try
      {
        var version = require('../../../package.json').version
      }
      catch(e)
      {
        var version = '(unknown)'
      }
      var data = "exports.nodeos = '"+version+"'"

      fs.appendFile(path.join('deps', this.name, 'lib/os.js'), data, callback)
    }
  },
  {
    name: 'qemu',
    url: QEMU_URL,
    action: function(callback)
    {
      var options =
      {
        cwd: path.join('deps', this.name),
        stdio: ['ignore', 'ignore', process.stderr]
      }

      var args = ['clone','git://git.qemu-project.org/dtc.git']

      cp.spawn('git', args, options)
      .on('exit', function(error)
      {
        if(error) return callback(error)

        var args =
        [
          '--prefix='+path.resolve('usr'),
          '--target-list='+targetList.join(','),
          '--disable-docs',
          '--disable-vnc',
          '--enable-sdl'
        ]

        cp.execFile('./configure', args, options, function(error)
        {
          if(error) return callback(error)

          cp.spawn('make', ['-j'+JOBS], options)
          .on('exit', function(error)
          {
            if(error) return callback(error)

            cp.spawn('make', ['install'], options)
            .on('exit', callback)
          })
        })
      })
    }
  }
]


manager(downloads, function(error)
{
  if(error)
  {
    console.error(error)
    process.exit(1)
  }
})
