#!/usr/bin/env node

var readlinkSync = require('fs').readlinkSync

var suppose = require('suppose')


var cpu = process.argv[2]

var cpu_family;
switch(cpu)
{
  case 'armv6':
    cpu_family = 'arm'
  break

  case 'i386':
  case 'i486':
  case 'i586':
  case 'i686':
  case 'i786':
    cpu_family = 'i386'
  break

  case 'nocona':
  case 'x86_64':
    cpu_family = 'x86_64'
  break

  default:
    console.error('Unknown cpu:',cpu)
    process.exit(-1)
}

var exe
var timeout = setTimeout(function()
{
  exe.kill()

  console.error('Timeout while waiting an answer')
  process.exit(-2)
}, 5*1000)


const LD_LIBRARY_PATH = 'node_modules/nodeos-cross-toolchain/out/'+cpu_family+'-nodeos-linux-musl/lib'

process.env.LD_LIBRARY_PATH = LD_LIBRARY_PATH
var command = 'qemu-'+cpu_family
//var args = ['-L', 'obj/'+cpu+'/lib', 'obj/'+cpu+'/node']
var args = [LD_LIBRARY_PATH+'/libc.so', 'obj/'+cpu+'/node', '-i']

//require('child_process').spawn(command, args, {stdio: 'inherit'})

exe = suppose(command, args)
//  .debug(process.stderr)
  .on(/> /).respond('setTimeout(console.log, 1000, "this is","a test")\n')
  .on(/this is a test/, function(exe)
  {
    exe.kill()
  })
  .error(function(error)
  {
    if(error.message.indexOf('terminating on signal 15 from pid') < 0)
      console.trace(error)
  })
  .end(function()
  {
    clearTimeout(timeout)

    var expects = this.expects.length
    if(expects) process.exit(expects)
  })
